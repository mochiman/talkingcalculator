;**************************************************************************************
; Port definitions
;**************************************************************************************
;
;
CONSTANT PHONEME_OUT_PORT, 80       ; Output of phoneme code 
CONSTANT ASCII_IN_PORT, 00	        ; Input data of phoneme from keyboard
CONSTANT FSM_OUT_PORT, 40 			; Output with 1st bit audio_ctrl start, 2nd bit reset_edge_trap (for audio_ctrl finish trap), 3rd bit pico finish signal
CONSTANT FSM_IN_PORT, 20 			; Input with 1st bit audio_ctrl finish, 2nd bit pico_start

;**************************************************************************************
; Scratch Pad Memory Locations
;**************************************************************************************
;
;
CONSTANT SAVED_ASCII, 04 			; Saves inputted ascii value from kbd
CONSTANT SAVED_NUM, 05				; Saves ascii value converted into number


;**************************************************************************************
; Constants
;**************************************************************************************
;
;
;; Define constants for all the ascii values.
CONSTANT ascii_SPACE      , 20    ; ascii code
CONSTANT ascii_EXCLAIM    , 21    ; ascii code
CONSTANT ascii_DBLQUOT    , 22    ; ascii code
CONSTANT ascii_NUMSIGN    , 23    ; ascii code
CONSTANT ascii_DOLLAR     , 24    ; ascii code
CONSTANT ascii_PERCENT    , 25    ; ascii code
CONSTANT ascii_AMP        , 26    ; ascii code
CONSTANT ascii_SINQUOT    , 27    ; ascii code
CONSTANT ascii_LPAREN     , 28    ; ascii code
CONSTANT ascii_RPAREN     , 29    ; ascii code
CONSTANT ascii_ASTERISK   , 2A    ; ascii code
CONSTANT ascii_PLUS       , 2B    ; ascii code
CONSTANT ascii_COMMA      , 2C    ; ascii code
CONSTANT ascii_MINUS      , 2D    ; ascii code
CONSTANT ascii_PERIOD     , 2E    ; ascii code
CONSTANT ascii_FWDSLASH   , 2F    ; ascii code

CONSTANT ascii_0          , 30    ; ascii code
CONSTANT ascii_1          , 31    ; ascii code
CONSTANT ascii_2          , 32    ; ascii code
CONSTANT ascii_3          , 33    ; ascii code
CONSTANT ascii_4          , 34    ; ascii code
CONSTANT ascii_5          , 35    ; ascii code
CONSTANT ascii_6          , 36    ; ascii code
CONSTANT ascii_7          , 37    ; ascii code
CONSTANT ascii_8          , 38    ; ascii code
CONSTANT ascii_9          , 39    ; ascii code
CONSTANT ascii_COLON      , 3A    ; ascii code
CONSTANT ascii_SEMI       , 3B    ; ascii code
CONSTANT ascii_LESS       , 3C    ; ascii code
CONSTANT ascii_EQUAL      , 3D    ; ascii code
CONSTANT ascii_GREATER    , 3E    ; ascii code
CONSTANT ascii_QUESTION   , 3F    ; ascii code

CONSTANT ascii_CIRCAT     , 40    ; ascii code
CONSTANT ascii_A          , 41    ; ascii code
CONSTANT ascii_B          , 42    ; ascii code
CONSTANT ascii_C          , 43    ; ascii code
CONSTANT ascii_D          , 44    ; ascii code
CONSTANT ascii_E          , 45    ; ascii code
CONSTANT ascii_F          , 46    ; ascii code
CONSTANT ascii_G          , 47    ; ascii code
CONSTANT ascii_H          , 48    ; ascii code
CONSTANT ascii_I          , 49    ; ascii code
CONSTANT ascii_J          , 4A    ; ascii code
CONSTANT ascii_K          , 4B    ; ascii code
CONSTANT ascii_L          , 4C    ; ascii code
CONSTANT ascii_M          , 4D    ; ascii code
CONSTANT ascii_N          , 4E    ; ascii code
CONSTANT ascii_O          , 4F    ; ascii code

CONSTANT ascii_P          , 50    ; ascii code
CONSTANT ascii_Q          , 51    ; ascii code
CONSTANT ascii_R          , 52    ; ascii code
CONSTANT ascii_S          , 53    ; ascii code
CONSTANT ascii_T          , 54    ; ascii code
CONSTANT ascii_U          , 55    ; ascii code
CONSTANT ascii_V          , 56    ; ascii code
CONSTANT ascii_W          , 57    ; ascii code
CONSTANT ascii_X          , 58    ; ascii code
CONSTANT ascii_Y          , 59    ; ascii code
CONSTANT ascii_Z          , 5A    ; ascii code
CONSTANT ascii_LBKT       , 5B    ; ascii code
CONSTANT ascii_BKSLASH    , 5C    ; ascii code
CONSTANT ascii_RBKT       , 5D    ; ascii code
CONSTANT ascii_CARET      , 5E    ; ascii code
CONSTANT ascii_DASH       , 5F    ; ascii code

CONSTANT ascii_TICK       , 60    ; ascii code
CONSTANT ascii_a          , 61    ; ascii code
CONSTANT ascii_b          , 62    ; ascii code
CONSTANT ascii_c          , 63    ; ascii code
CONSTANT ascii_d          , 64    ; ascii code
CONSTANT ascii_e          , 65    ; ascii code
CONSTANT ascii_f          , 66    ; ascii code
CONSTANT ascii_g          , 67    ; ascii code
CONSTANT ascii_h          , 68    ; ascii code
CONSTANT ascii_i          , 69    ; ascii code
CONSTANT ascii_j          , 6A    ; ascii code
CONSTANT ascii_k          , 6B    ; ascii code
CONSTANT ascii_l          , 6C    ; ascii code
CONSTANT ascii_m          , 6D    ; ascii code
CONSTANT ascii_n          , 6E    ; ascii code
CONSTANT ascii_o          , 6F    ; ascii code

CONSTANT ascii_p          , 70    ; ascii code
CONSTANT ascii_q          , 71    ; ascii code
CONSTANT ascii_r          , 72    ; ascii code
CONSTANT ascii_s          , 73    ; ascii code
CONSTANT ascii_t          , 74    ; ascii code
CONSTANT ascii_u          , 75    ; ascii code
CONSTANT ascii_v          , 76    ; ascii code
CONSTANT ascii_w          , 77    ; ascii code
CONSTANT ascii_x          , 78    ; ascii code
CONSTANT ascii_y          , 79    ; ascii code
CONSTANT ascii_z          , 7A    ; ascii code
CONSTANT ascii_LBRACE     , 7B    ; ascii code
CONSTANT ascii_VBAR       , 7C    ; ascii code
CONSTANT ascii_RBRACE     , 7D    ; ascii code
CONSTANT ascii_TILDE      , 7E    ; ascii code
CONSTANT ascii_ULINE      , 7F    ; ascii code

;; Define constants for all the phoneme values.

CONSTANT phoneme_PA1      , 00    ; phoneme code
CONSTANT phoneme_PA2      , 01    ; phoneme code
CONSTANT phoneme_PA3      , 02    ; phoneme code
CONSTANT phoneme_PA4      , 03    ; phoneme code
CONSTANT phoneme_PA5      , 04    ; phoneme code
CONSTANT phoneme_OY       , 05    ; phoneme code
CONSTANT phoneme_AY       , 06    ; phoneme code
CONSTANT phoneme_EH       , 07    ; phoneme code
CONSTANT phoneme_KK3      , 08    ; phoneme code
CONSTANT phoneme_PP       , 09    ; phoneme code
CONSTANT phoneme_JH       , 0A    ; phoneme code
CONSTANT phoneme_NN1      , 0B    ; phoneme code
CONSTANT phoneme_IH       , 0C    ; phoneme code
CONSTANT phoneme_TT2      , 0D    ; phoneme code
CONSTANT phoneme_RR1      , 0E    ; phoneme code
CONSTANT phoneme_AX       , 0F    ; phoneme code
CONSTANT phoneme_MM       , 10    ; phoneme code
CONSTANT phoneme_TT1      , 11    ; phoneme code
CONSTANT phoneme_DH1      , 12    ; phoneme code
CONSTANT phoneme_IY       , 13    ; phoneme code
CONSTANT phoneme_EY       , 14    ; phoneme code
CONSTANT phoneme_DD1      , 15    ; phoneme code
CONSTANT phoneme_UW1      , 16    ; phoneme code
CONSTANT phoneme_AO       , 17    ; phoneme code
CONSTANT phoneme_AA       , 18    ; phoneme code
CONSTANT phoneme_YY2      , 19    ; phoneme code
CONSTANT phoneme_AE       , 1A    ; phoneme code
CONSTANT phoneme_HH1      , 1B    ; phoneme code
CONSTANT phoneme_BB1      , 1C    ; phoneme code
CONSTANT phoneme_TH       , 1D    ; phoneme code
CONSTANT phoneme_UH       , 1E    ; phoneme code
CONSTANT phoneme_UW2      , 1F    ; phoneme code
CONSTANT phoneme_AW       , 20    ; phoneme code
CONSTANT phoneme_DD2      , 21    ; phoneme code
CONSTANT phoneme_GG3      , 22    ; phoneme code
CONSTANT phoneme_VV       , 23    ; phoneme code
CONSTANT phoneme_GG1      , 24    ; phoneme code
CONSTANT phoneme_SH       , 25    ; phoneme code
CONSTANT phoneme_ZH       , 26    ; phoneme code
CONSTANT phoneme_RR2      , 27    ; phoneme code
CONSTANT phoneme_FF       , 28    ; phoneme code
CONSTANT phoneme_KK2      , 29    ; phoneme code
CONSTANT phoneme_KK1      , 2A    ; phoneme code
CONSTANT phoneme_ZZ       , 2B    ; phoneme code
CONSTANT phoneme_NG       , 2C    ; phoneme code
CONSTANT phoneme_LL       , 2D    ; phoneme code
CONSTANT phoneme_WW       , 2E    ; phoneme code
CONSTANT phoneme_XR       , 2F    ; phoneme code
CONSTANT phoneme_WH       , 30    ; phoneme code
CONSTANT phoneme_YY1      , 31    ; phoneme code
CONSTANT phoneme_CH       , 32    ; phoneme code
CONSTANT phoneme_ER1      , 33    ; phoneme code
CONSTANT phoneme_ER2      , 34    ; phoneme code
CONSTANT phoneme_OW       , 35    ; phoneme code
CONSTANT phoneme_DH2      , 36    ; phoneme code
CONSTANT phoneme_SS       , 37    ; phoneme code
CONSTANT phoneme_NN2      , 38    ; phoneme code
CONSTANT phoneme_HH2      , 39    ; phoneme code
CONSTANT phoneme_OR       , 3A    ; phoneme code
CONSTANT phoneme_AR       , 3B    ; phoneme code
CONSTANT phoneme_YR       , 3C    ; phoneme code
CONSTANT phoneme_GG2      , 3D    ; phoneme code
CONSTANT phoneme_EL       , 3E    ; phoneme code
CONSTANT phoneme_BB2      , 3F    ; phoneme code

;;============================================================================
;; Cold Start
;;============================================================================

cold_start: LOAD s4, 00                   ; Using s4 because step must be 0 for proper operation     
			STORE s4, SAVED_NUM
			STORE s4, SAVED_ASCII
			OUTPUT s4, FSM_OUT_PORT
			OUTPUT s4, PHONEME_OUT_PORT
		
;**************************************************************************************
; Main program
;**************************************************************************************
;
; Talking Calculator (smart picoblaze)
;

; Steps in program:
; 0: num1 = input
; 1: operator = input
; 2: num2 = input
; 3: output result and reset step

; Register definitions
; s0 = ASCII input, operations
; s1 = NUM1		(0-9)
; s2 = NUM2		(0-9)
; s3 = Operator (+/-)
; s4 = Step 	(0-3)(which step of the calculation were on)
			
main_program: 
	; Polling for pico_start signal in FSM_IN_PORT[1]
	INPUT s0, FSM_IN_PORT
	TEST s0, 02
	JUMP Z, main_program

	; We've recieved a character, process it
	; Get ascii and save value
	INPUT s0, ASCII_IN_PORT
	STORE s0, SAVED_ASCII

	; Convert ascii to number and save
	SUB s0, 30 
	STORE s0, SAVED_NUM

	; Jump to the step of calculation were on
	COMPARE s4, 00
	JUMP Z, step1
	COMPARE s4, 01
	JUMP Z, step2
	COMPARE s4, 02
	JUMP Z, step3
	COMPARE s4, 03
	JUMP Z, step4

	JUMP error ; should not be able to get here

; Last step was successful and value was stored, increment step for next input
increment_step:
	ADD s4, 01
	JUMP finish

error:
	CALL talkworderror

; Reset pico_start signal, allowing picoblaze to recieve new commands from hardware
finish:
	LOAD s0, 04
	OUTPUT s0, FSM_OUT_PORT
	LOAD s0, 00
	OUTPUT s0, FSM_OUT_PORT

	JUMP main_program       ; Main loop	

; Steps of the calculation
step1:
	; Check if number is valid (0-9)
	CALL func_checkValidNum
	COMPARE s0, 01 
	JUMP NZ, error

	; Number is valid, store into s1 (NUM1) and output audio
	FETCH s1, SAVED_NUM
	LOAD s0, s1
	CALL func_numberToSpeech
	JUMP increment_step

step2:
	; Check if operator is valid (+ or -)
	CALL func_checkValidOperator
	COMPARE s0, 01 
	JUMP NZ, error

	; Operator is valid, store into s3 (OPERATOR) and output audio
	FETCH s3, SAVED_ASCII
	LOAD s0, s3
	CALL asciiToSpeech
	JUMP increment_step

step3:
	; Check if number is valid (0-9)
	CALL func_checkValidNum
	COMPARE s0, 01 
	JUMP NZ, error


	; Number is valid, store into s2 (NUM2) and output audio
	FETCH s2, SAVED_NUM
	LOAD s0, s2
	CALL func_numberToSpeech
	JUMP increment_step

step4:
	; Check if equal operator has been inputted
	FETCH s0, SAVED_ASCII
	COMPARE s0, 3D
	JUMP NZ, error

	; Equal operator has been inputted, output equal audio
	CALL talkwordequals
	
	; Perform math operation of NUM1 (+/-) NUM2
	CALL func_mathOperation

	; Check if result is negative. If negative, get absolute value and output "minus" audio
	TEST s0, 80
	JUMP Z, outputSum

	; Result is negative, convert to absolute value
	XOR s0, FF
	ADD s0, 01
	
	; Store saved value to scratch, say minus, then fetch
	STORE s0, SAVED_NUM
	CALL talkwordminus
	FETCH s0, SAVED_NUM

outputSum:
	; Output sum to audio
	CALL func_numberToSpeech
	
	; Reset s4 (STEP) to step 1 and finish
	LOAD s4, 00
	JUMP finish


;**************************************************************************************
; Functions
;**************************************************************************************
;
; Various functions, return value is stored in s0 (if there is one)
;

; Check Valid Number
; checks if input is valid 0-9
; s0 is 0 for invalid, 1 for valid
func_checkValidNum:
	FETCH s0, SAVED_NUM
	COMPARE s0, 00 ; num >= 0
	JUMP C, invalidNum
	COMPARE s0, 0A ; num < 10 == num <= 9
	JUMP NC, invalidNum
	LOAD s0, 01
	RETURN

invalidNum:
	LOAD s0, 00
	RETURN

; Check Valid Operator
; checks if input is valid + or -
; s0 is 0 for invalid, 1 for valid
func_checkValidOperator:
	FETCH s0, SAVED_ASCII
	COMPARE s0, 2B ; +
	JUMP Z, validOperator
	COMPARE s0, 2D ; -
	JUMP Z, validOperator
	LOAD s0, 00
	RETURN

validOperator:
	LOAD s0, 01
	RETURN

; Number To Speech
; s0 is input, outputs number as audio if valid
; tried making a jump table but the label address can't be directly accessed with this architecture
; would've worked on the PicoBlaze-6 with the load s0, label'lower
func_numberToSpeech:
	COMPARE s0, 00
	JUMP Z, talkword0
	COMPARE s0, 01
	JUMP Z, talkword1
	COMPARE s0, 02
	JUMP Z, talkword2
	COMPARE s0, 03
	JUMP Z, talkword3
	COMPARE s0, 04
	JUMP Z, talkword4
	COMPARE s0, 05
	JUMP Z, talkword5
	COMPARE s0, 06
	JUMP Z, talkword6
	COMPARE s0, 07
	JUMP Z, talkword7
	COMPARE s0, 08
	JUMP Z, talkword8
	COMPARE s0, 09
	JUMP Z, talkword9
	COMPARE s0, 0A
	JUMP Z, talkword10
	COMPARE s0, 0B
	JUMP Z, talkword11
	COMPARE s0, 0C
	JUMP Z, talkword12
	COMPARE s0, 0D
	JUMP Z, talkword13
	COMPARE s0, 0E
	JUMP Z, talkword14
	COMPARE s0, 0F
	JUMP Z, talkword15
	COMPARE s0, 10
	JUMP Z, talkword16
	COMPARE s0, 11
	JUMP Z, talkword17
	COMPARE s0, 12
	JUMP Z, talkword18

	JUMP talkworderror

; Ascii To Speech
; s0 is input, outputs operator as audio if valid
asciiToSpeech:
	COMPARE s0, 2B
	JUMP Z, talkwordplus
	COMPARE s0, 2D
	JUMP Z, talkwordminus

	JUMP talkworderror

; Math Operation
; Calculates sum of s1 and s2
; Chooses addition or subtraction based on operator in s3
func_mathOperation:
	LOAD s0, s1
	COMPARE s3, 2B
	JUMP NZ, subtraction

addition:
	ADD s0, s2
	RETURN

subtraction:
	SUB s0, s2
	RETURN

;;============================================================================
;; Test message and phoneme voicing subroutine.
;;============================================================================

talkword0:
	call	talkphonemeZZ
	call	talkphonemeEH
	call	talkphonemeRR2
	call	talkphonemeOW
	return

talkword1:
	call	talkphonemeWW
	call	talkphonemeAO
	call	talkphonemeNN1
	return

talkword2:
	call	talkphonemeTT2
	call	talkphonemeUW2
	return

talkword3:
	call	talkphonemeTH
	call	talkphonemeRR2
	call	talkphonemeIY
	return

talkword4:
	call	talkphonemeFF
	call	talkphonemeOR
	return

talkword5:
	call	talkphonemeFF
	call	talkphonemeAY
	call	talkphonemeVV
	return

talkword6:
	call	talkphonemeSS
	call	talkphonemeIH
	call	talkphonemeKK2
	call	talkphonemeSS
	call	talkphonemeSS
	return

talkword7:
	call	talkphonemeSS
	call	talkphonemeEH
	call	talkphonemeVV
	call	talkphonemeAX
	call	talkphonemeNN1
	return

talkword8:
	call	talkphonemeEY
	call	talkphonemeTT1
	return

talkword9:
	call	talkphonemeNN2
	call	talkphonemeAY
	call	talkphonemeNN1
	return

talkword10:
	call	talkphonemeTT2
	call	talkphonemeEH
	call	talkphonemeNN1
	return

talkword11:
	call	talkphonemeIH
	call	talkphonemeLL
	call	talkphonemeEH
	call	talkphonemeVV
	call	talkphonemeEH
	call	talkphonemeNN1
	return

talkword12:
	call	talkphonemeTT2
	call	talkphonemeWW
	call	talkphonemeEH
	call	talkphonemeEL
	call	talkphonemeVV
	return

talkword13:
	call	talkphonemeTH
	call	talkphonemeER2

talkwordteen:
	call	talkphonemeTT2
	call	talkphonemeIY
	call	talkphonemeNN1
	return

talkword14:
	call	talkword4
	JUMP	talkwordteen

talkword15:
	call	talkphonemeFF
	call	talkphonemeIH
	call	talkphonemeFF
	JUMP	talkwordteen

talkword16:
	call	talkword6
	JUMP	talkwordteen

talkword17:
	call	talkword7
	JUMP	talkwordteen

talkword18:
	call	talkword8
	JUMP	talkwordteen

talkword19:
	call	talkword9
	JUMP	talkwordteen

;
;
;
;**************************************************************************************
; Custom Words
;**************************************************************************************
;
;
;
talkworderror:
	call talkphonemeEH
	call talkphonemeXR
	call talkphonemeOR
	JUMP endword

talkwordequals:
	call talkphonemeIY
	call talkphonemePA2
	call talkphonemePA3
	call talkphonemeKK3
	call talkphonemeWH
	call talkphonemeAX
	call talkphonemeEL
	call talkphonemeZZ
	JUMP endword

talkwordplus:
	call talkphonemePP
	call talkphonemeLL
	call talkphonemeAX
	call talkphonemeAX
	call talkphonemeSS
	call talkphonemeSS
	JUMP endword

talkwordminus:
	call talkphonemeMM
	call talkphonemeAY
	call talkphonemeNN1
	call talkphonemeAX
	call talkphonemeZZ
	JUMP endword

endword:
	call	talkphonemePA5
	return

say_phoneme:  
			; Set phoneme out phoneme_out_port to current phoneme 
			OUTPUT s0, PHONEME_OUT_PORT 

			; Reset finish edgetrap and start audio_fsm eg FSM_OUT_PORT[1:0] = 2'b11
			LOAD s0, 03 
			OUTPUT s0, FSM_OUT_PORT 

			; Reset FSM_OUT_PORT
			LOAD s0, 00 
			OUTPUT s0, FSM_OUT_PORT 

; Loop until finish signal has been issued by the audio_fsm in FSM_IN_PORT[1]
waitForAudio: 
			INPUT s0, FSM_IN_PORT
			TEST s0, 01 
			JUMP Z, waitForAudio 
	
			RETURN


talkphonemeAA:			; hOt
	LOAD s0,	phoneme_AA		; can be doubled
	JUMP	say_phoneme
talkphonemeAE:			; hAt
	LOAD s0,	phoneme_AE		; can be doubled
	JUMP	say_phoneme
talkphonemeAO:			; AUght
	LOAD s0,	phoneme_AO		; can be doubled
	JUMP	say_phoneme
talkphonemeAR:			; alARm
	LOAD s0,	phoneme_AR
	JUMP	say_phoneme
talkphonemeAW:			; dOWn
	LOAD s0,	phoneme_AW
	JUMP	say_phoneme
talkphonemeAX:			; sUceed
	LOAD s0,	phoneme_AX		; can be doubled
	JUMP	say_phoneme
talkphonemeAY:			; kIte
	LOAD s0,	phoneme_AY
	JUMP	say_phoneme
talkphonemeBB1:			; riB
	LOAD s0,	phoneme_BB1		; usually preceed with 10-30 mS silence
	JUMP	say_phoneme
talkphonemeBB2:			; Beast
	LOAD s0,	phoneme_BB2		; usually preceed with 10-30 mS silence
	JUMP	say_phoneme
talkphonemeCH:			; CHurCH
	LOAD s0,	phoneme_CH
	JUMP	say_phoneme
talkphonemeDD1:			; enD
	LOAD s0,	phoneme_DD1		; usually preceed with 10-30 mS silence
	JUMP	say_phoneme
talkphonemeDD2:			; Down
	LOAD s0,	phoneme_DD2	; usually preceed with 10-30 mS silence
	JUMP	say_phoneme
talkphonemeDH1:			; THis
	LOAD s0,	phoneme_DH1
	JUMP	say_phoneme
talkphonemeDH2:			; baTHe
	LOAD s0,	phoneme_DH2
	JUMP	say_phoneme
talkphonemeEH:			; End
	LOAD s0,	phoneme_EH	; can be doubled
	JUMP	say_phoneme
talkphonemeEL:			; angLE
	LOAD s0,	phoneme_EL
	JUMP	say_phoneme
talkphonemeER1:			; lettER
	LOAD s0,	phoneme_ER1
	JUMP	say_phoneme
talkphonemeER2:			; fERn
	LOAD s0,	phoneme_ER2
	JUMP	say_phoneme
talkphonemeEY:			; trAY
	LOAD s0,	phoneme_EY
	JUMP	say_phoneme
talkphonemeFF:			; Food
	LOAD s0,	phoneme_FF		; usually double for initial
	JUMP	say_phoneme
talkphonemeGG1:			; Guest
	LOAD s0,	phoneme_GG1		; usually preceed with 10-30 mS silence
	JUMP	say_phoneme
talkphonemeGG2:			; Got
	LOAD s0,	phoneme_GG2		; usually preceed with 10-30 mS silence
	JUMP	say_phoneme
talkphonemeGG3:			; peG
	LOAD s0,	phoneme_GG3		; usually preceed with 10-30 mS silence
	JUMP	say_phoneme
talkphonemeHH1:			; He
	LOAD s0,	phoneme_HH1	; usually double for initial
	JUMP	say_phoneme
talkphonemeHH2:			; Hoe
	LOAD s0,	phoneme_HH2		; usually double for initial
	JUMP	say_phoneme
talkphonemeIH:			; sIt
	LOAD s0,	phoneme_IH		; can be doubled
	JUMP	say_phoneme
talkphonemeIY:			; sEE
	LOAD s0,	phoneme_IY
	JUMP	say_phoneme
talkphonemeJH:			; JudGe
	LOAD s0,	phoneme_JH
	JUMP	say_phoneme
talkphonemeKK1:			; Can't
	LOAD s0,	phoneme_KK1	; usually preceed with 50-80 mS silence
	JUMP	say_phoneme
talkphonemeKK2:			; speaK
	LOAD s0,	phoneme_KK2		; usually preceed with 50-80 mS silence
	JUMP	say_phoneme
talkphonemeKK3:			; Crane
	LOAD s0,    phoneme_KK3	; usually preceed with 50-80 mS silence
	JUMP	say_phoneme
talkphonemeLL:			; Like
	LOAD s0,	phoneme_LL
	JUMP	say_phoneme
talkphonemeMM:			; Milk
	LOAD s0,	phoneme_MM
	JUMP	say_phoneme
talkphonemeNG:			; aNGer
	LOAD s0,	phoneme_NG
	JUMP	say_phoneme
talkphonemeNN1:			; thiN
	LOAD s0,	phoneme_NN1
	JUMP	say_phoneme
talkphonemeNN2:			; No
	LOAD s0,	phoneme_NN2
	JUMP	say_phoneme
talkphonemeOR:			; fORtune
	LOAD s0,	phoneme_OR
	JUMP	say_phoneme
talkphonemeOW:			; zOne
	LOAD s0,	phoneme_OW
	JUMP	say_phoneme
talkphonemeOY:			; vOIce
	LOAD s0,	phoneme_OY
	JUMP	say_phoneme
talkphonemePP:			; Pow
	LOAD s0,	phoneme_PP		; usually preceed with 50-80 mS silence
	JUMP	say_phoneme
talkphonemeRR1:			; Read
	LOAD s0,	phoneme_RR1
	JUMP	say_phoneme
talkphonemeRR2:			; cRane
	LOAD s0,	phoneme_RR2
	JUMP	say_phoneme
talkphonemeSH:			; SHip
	LOAD s0,	phoneme_SH		; usually double for initial
	JUMP	say_phoneme
talkphonemeSS:			; veSt
	LOAD s0,	phoneme_SS		; usually double for initial
	JUMP	say_phoneme
talkphonemeTH:			; THin
	LOAD s0,	phoneme_TH		; usually double for initial
	JUMP	say_phoneme
talkphonemeTT1:			; parTs
	LOAD s0,	phoneme_TT1	; usually preceed with 50-80 mS silence
	JUMP	say_phoneme
talkphonemeTT2:			; To
	LOAD s0,	phoneme_TT2		; usually preceed with 50-80 mS silence
	JUMP	say_phoneme
talkphonemeUH:			; bOOk
	LOAD s0,	phoneme_UH		; may be doubled
	JUMP	say_phoneme
talkphonemeUW1:			; tO
	LOAD s0,	phoneme_UW1
	JUMP	say_phoneme
talkphonemeUW2:			; fOOd
	LOAD s0,	phoneme_UW2
	JUMP	say_phoneme
talkphonemeVV:			; Vest
	LOAD s0,	phoneme_VV
	JUMP	say_phoneme
talkphonemeWH:			; WHig
	LOAD s0,	phoneme_WH	; usually double for initial
	JUMP	say_phoneme
talkphonemeWW:			; We
	LOAD s0,	phoneme_WW
	JUMP	say_phoneme
talkphonemeXR:			; stARs
	LOAD s0,	phoneme_XR
	JUMP	say_phoneme
talkphonemeYR:			; hEAr
	LOAD s0,	phoneme_YR
	JUMP	say_phoneme
talkphonemeYY1:			; cUte
	LOAD s0,	phoneme_YY1
	JUMP	say_phoneme
talkphonemeYY2:			; Yes
	LOAD s0,	phoneme_YY2
	JUMP	say_phoneme
talkphonemeZH:			; pleaSure
	LOAD s0,	phoneme_ZH
	JUMP	say_phoneme
talkphonemeZZ:			; Zoo
	LOAD s0,	phoneme_ZZ
	JUMP	say_phoneme
talkphonemePA1:			; 10 mS silence
	LOAD s0,	phoneme_PA1
	JUMP	say_phoneme
talkphonemePA2:			; 30 mS silence
	LOAD s0,	phoneme_PA2
	JUMP	say_phoneme
talkphonemePA3:			; 50 mS silence
	LOAD s0,	phoneme_PA3
	JUMP	say_phoneme
talkphonemePA4:			; 100 mS silence
	LOAD s0,	phoneme_PA4
	JUMP	say_phoneme
talkphonemePA5:			; 200 mS silence
	LOAD s0,	phoneme_PA5
	JUMP	say_phoneme

talkphonemePA6:			; 500 mS silence
	call talkphonemePA5
      call talkphonemePA5
      call talkphonemePA4
	JUMP	say_phoneme